{"ast":null,"code":"import \"../CSSContents/newLog.css\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\n\n/*\r\nfunction Login2() {\r\n\r\n    //Saving the values in the form variable\r\n    const [form, setForm] = useState({\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n    });\r\n    //mode determines whether the form should disply login or register\r\n    const [mode, setMode] = useState('login');\r\n    const [errors, setErrors] = useState({});\r\n    //message is used to disply any form of error to the user\r\n    const [message, setMessage] = useState('');\r\n\r\n\r\n    //it updates the users values in case a change has been made \r\n    //used a spread operator to update the form by targeting .name and .value \r\n    const handleChange = (e) => {\r\n        setForm({\r\n            ...form,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n\r\n    };\r\n\r\n    const validateInfo = (form) => {\r\n        let errors = {};\r\n        if (!form.username.trim()) {\r\n            errors.username = 'Username is required!';\r\n        }\r\n        if (!form.email) {\r\n            errors.email = 'Email is required!';\r\n        } else if (!/\\S+@\\S+\\.\\S+/.test(form.email)) {\r\n            errors.email = 'Email address is invalid';\r\n        }\r\n        if (!form.password) {\r\n            errors.password = 'Password is required';\r\n        } else if (form.password.length < 6) {\r\n            errors.password = 'Password must be at least 6 characters long!';\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n\r\n\r\n    //it is used when the form is submitted, sends message to the backend to either login or register\r\n    //if successful/denied  response is saved in message\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const errors = validateInfo(form);\r\n        setErrors(errors);\r\n\r\n        if (Object.keys(errors).length === 0) {\r\n            if (mode === 'login') {\r\n                axios.post('http://localhost:4000/login', form)\r\n                    .then((response) => {\r\n                        if (response.data === 'Logged in successfully') {\r\n                            setMessage('Logged in successfully');\r\n\r\n                            window.location.href = '/';\r\n                        } else {\r\n                            setMessage('Login was unsuccessful');\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        setMessage(error.message);\r\n                    });\r\n            } else {\r\n                axios.get(`http://localhost:4000/checkUser/${form.username}`)\r\n                    .then((response) => {\r\n                        if (response.data === 'User exists') {\r\n                            setMessage('User already exists');\r\n                            return;\r\n                        } else {\r\n                            axios.post('http://localhost:4000/register', form)\r\n                                .then((response) => {\r\n                                    setMessage(response.data);\r\n                                })\r\n                                .catch((error) => {\r\n                                    setMessage(error.message);\r\n                                });\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        setMessage(error.message);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"username\"\r\n                    placeholder=\"Username\"\r\n                    value={form.username}\r\n                    onChange={handleChange}\r\n                />\r\n                {errors.username && <p> {errors.username}</p>}\r\n                {mode === 'register' && (\r\n                    <>\r\n                        <input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            placeholder=\"Email\"\r\n                            value={form.email}\r\n                            onChange={handleChange}\r\n                        />\r\n                        {errors.email && <p> {errors.email}</p>}\r\n                    </>\r\n                )}\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={form.password}\r\n                    onChange={handleChange}\r\n                />\r\n                {errors.password && <p> {errors.password}</p>}\r\n\r\n                <button type=\"submit\">\r\n                    {mode === 'login' ? 'Login' : 'Register'}\r\n                </button>\r\n\r\n                <button type=\"button\" onClick={() => setMode(mode === 'login' ? 'register' : 'login')}>\r\n                    Switch to {mode === 'login' ? 'Register' : 'Login'}\r\n                </button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\n//window.location.href ='/newPage';\r\n//ternary operator\r\n\r\nexport default Login2;\r\n*/\n\n/*\r\n//insert in the login\r\nwindow.localStorage.setItem('isLoggedIn', true);\r\n\r\n  useEffect(() => {\r\n        const isLoggedIn = window.localStorage.getItem('isLoggedIn');\r\n        if (isLoggedIn) {\r\n            setMessage(\"Logged in successfully\");\r\n            window.location.href = '/';\r\n        }\r\n    }, []);\r\n*/\n\n/*\r\n\r\n const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setErros(validateInfo(form));\r\n\r\n\r\n        if (mode === 'login') {\r\n            axios.post('http://localhost:4000/login', form)\r\n                .then((response) => {\r\n                    setMessage(response.data);\r\n                })\r\n                .catch((error) => {\r\n                    setMessage(error.message);\r\n                });\r\n        } else {\r\n            axios.post('http://localhost:4000/register', form)\r\n                .then((response) => {\r\n                    setMessage(response.data);\r\n                })\r\n                .catch((error) => {\r\n                    setMessage(error.message);\r\n                });\r\n        }\r\n\r\n    };\r\n*/","map":{"version":3,"names":["React","useState","useEffect","axios"],"sources":["E:/GitHub/CleanEnergyForBusiness/cleanenergyforbusiness/client/src/Components/Pages/Login2.js"],"sourcesContent":["import \"../CSSContents/newLog.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\n\r\n/*\r\nfunction Login2() {\r\n\r\n    //Saving the values in the form variable\r\n    const [form, setForm] = useState({\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n    });\r\n    //mode determines whether the form should disply login or register\r\n    const [mode, setMode] = useState('login');\r\n    const [errors, setErrors] = useState({});\r\n    //message is used to disply any form of error to the user\r\n    const [message, setMessage] = useState('');\r\n\r\n\r\n    //it updates the users values in case a change has been made \r\n    //used a spread operator to update the form by targeting .name and .value \r\n    const handleChange = (e) => {\r\n        setForm({\r\n            ...form,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n\r\n    };\r\n\r\n    const validateInfo = (form) => {\r\n        let errors = {};\r\n        if (!form.username.trim()) {\r\n            errors.username = 'Username is required!';\r\n        }\r\n        if (!form.email) {\r\n            errors.email = 'Email is required!';\r\n        } else if (!/\\S+@\\S+\\.\\S+/.test(form.email)) {\r\n            errors.email = 'Email address is invalid';\r\n        }\r\n        if (!form.password) {\r\n            errors.password = 'Password is required';\r\n        } else if (form.password.length < 6) {\r\n            errors.password = 'Password must be at least 6 characters long!';\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n\r\n\r\n    //it is used when the form is submitted, sends message to the backend to either login or register\r\n    //if successful/denied  response is saved in message\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const errors = validateInfo(form);\r\n        setErrors(errors);\r\n\r\n        if (Object.keys(errors).length === 0) {\r\n            if (mode === 'login') {\r\n                axios.post('http://localhost:4000/login', form)\r\n                    .then((response) => {\r\n                        if (response.data === 'Logged in successfully') {\r\n                            setMessage('Logged in successfully');\r\n\r\n                            window.location.href = '/';\r\n                        } else {\r\n                            setMessage('Login was unsuccessful');\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        setMessage(error.message);\r\n                    });\r\n            } else {\r\n                axios.get(`http://localhost:4000/checkUser/${form.username}`)\r\n                    .then((response) => {\r\n                        if (response.data === 'User exists') {\r\n                            setMessage('User already exists');\r\n                            return;\r\n                        } else {\r\n                            axios.post('http://localhost:4000/register', form)\r\n                                .then((response) => {\r\n                                    setMessage(response.data);\r\n                                })\r\n                                .catch((error) => {\r\n                                    setMessage(error.message);\r\n                                });\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        setMessage(error.message);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"username\"\r\n                    placeholder=\"Username\"\r\n                    value={form.username}\r\n                    onChange={handleChange}\r\n                />\r\n                {errors.username && <p> {errors.username}</p>}\r\n                {mode === 'register' && (\r\n                    <>\r\n                        <input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            placeholder=\"Email\"\r\n                            value={form.email}\r\n                            onChange={handleChange}\r\n                        />\r\n                        {errors.email && <p> {errors.email}</p>}\r\n                    </>\r\n                )}\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={form.password}\r\n                    onChange={handleChange}\r\n                />\r\n                {errors.password && <p> {errors.password}</p>}\r\n\r\n                <button type=\"submit\">\r\n                    {mode === 'login' ? 'Login' : 'Register'}\r\n                </button>\r\n\r\n                <button type=\"button\" onClick={() => setMode(mode === 'login' ? 'register' : 'login')}>\r\n                    Switch to {mode === 'login' ? 'Register' : 'Login'}\r\n                </button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\n//window.location.href ='/newPage';\r\n//ternary operator\r\n\r\nexport default Login2;\r\n*/\r\n\r\n/*\r\n//insert in the login\r\nwindow.localStorage.setItem('isLoggedIn', true);\r\n\r\n  useEffect(() => {\r\n        const isLoggedIn = window.localStorage.getItem('isLoggedIn');\r\n        if (isLoggedIn) {\r\n            setMessage(\"Logged in successfully\");\r\n            window.location.href = '/';\r\n        }\r\n    }, []);\r\n*/\r\n\r\n\r\n\r\n/*\r\n\r\n const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setErros(validateInfo(form));\r\n\r\n\r\n        if (mode === 'login') {\r\n            axios.post('http://localhost:4000/login', form)\r\n                .then((response) => {\r\n                    setMessage(response.data);\r\n                })\r\n                .catch((error) => {\r\n                    setMessage(error.message);\r\n                });\r\n        } else {\r\n            axios.post('http://localhost:4000/register', form)\r\n                .then((response) => {\r\n                    setMessage(response.data);\r\n                })\r\n                .catch((error) => {\r\n                    setMessage(error.message);\r\n                });\r\n        }\r\n\r\n    };\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA,OAAO,2BAA2B;AAClC,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;;AAEz},"metadata":{},"sourceType":"module","externalDependencies":[]}