{"ast":null,"code":"var _jsxFileName = \"E:\\\\GitHub\\\\Group-26-22-23-_CleanEnergyForBusiness\\\\CEFB\\\\client\\\\src\\\\Components\\\\Pages\\\\BusinessChat.js\",\n  _s = $RefreshSig$();\nimport '../CSSContents/BusinessChat.css';\nimport React, { useState, useEffect, useRef } from \"react\";\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BusinessChat() {\n  _s();\n  document.title = \"Business Chat\";\n  const username = JSON.parse(localStorage.getItem('username'));\n  const radarChatUser = JSON.parse(localStorage.getItem('radarChatUsername')); //radar - chat button clicked user\n  const [userChats, setUserChats] = useState({});\n  const [uniqueChats, setUniqueChats] = useState([]);\n  const [currentChats, setCurrentChats] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedChat, setSelectedChat] = useState(null);\n  const [messageInput, setMessageInput] = useState('');\n  const [submitEnabled, setSubmitEnabled] = useState(false);\n  const [update, setUpdate] = useState(false);\n  const socketRef = useRef(null);\n  useEffect(() => {\n    socketRef.current = io('http://localhost:5000', {\n      query: {\n        userId: username\n      }\n    });\n    socketRef.current.on('message', messageT => {\n      const chatFrom = messageT.chatFrom;\n      if (!uniqueChats.includes(chatFrom)) {\n        setUniqueChats(uniqueData => [...uniqueData, chatFrom]);\n      }\n      setUserChats(chatData => ({\n        ...chatData,\n        [chatFrom]: [...(chatData[chatFrom] || []), messageT]\n      }));\n      setUpdate(true);\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [username, uniqueChats]);\n  useEffect(() => {\n    axios.get(`http://localhost:4000/businesschat/getAllMessages/${username}`).then(response => {\n      if (response.data) {\n        const newChats = {};\n        const newUniqueChats = [];\n        response.data.forEach(messageObj => {\n          const {\n            chatID,\n            chatTo,\n            chatFrom,\n            message\n          } = messageObj;\n          let user = null;\n          if (chatTo === username) {\n            // user received message \"chatFrom is the query\"\n            user = chatFrom;\n          } else {\n            // user sent message\n            user = chatTo;\n          }\n          if (!newChats[user]) {\n            newChats[user] = [{\n              chatFrom,\n              message\n            }];\n            newUniqueChats.push(user);\n          } else {\n            newChats[user].push({\n              chatFrom,\n              message\n            });\n          }\n        });\n        if (radarChatUser !== null) {\n          if (!newUniqueChats.includes(radarChatUser)) {\n            newUniqueChats.push(radarChatUser);\n            newChats[radarChatUser] = [];\n          }\n        }\n        newUniqueChats.reverse();\n        setUserChats(newChats);\n        setUniqueChats(newUniqueChats);\n        setLoading(false);\n      }\n    }).catch(error => {\n      console.error(error);\n      setLoading(false);\n    });\n  }, []);\n  const onChatSelect = user => {\n    setSubmitEnabled(true);\n    setSelectedChat(user);\n    setCurrentChats(userChats[user]);\n  };\n  function onInputChange(e) {\n    if (submitEnabled) {\n      setMessageInput(e.target.value);\n    }\n  }\n  function onInputSubmit() {\n    if (submitEnabled) {\n      setSubmitEnabled(false);\n      console.log(messageInput);\n      if (selectedChat !== null && messageInput !== '' && messageInput.length <= 144) {\n        // not empty, less than 145 characters\n        const msg = {\n          chatFrom: username,\n          chatTo: selectedChat,\n          message: messageInput\n        };\n        console.log(msg);\n        axios.post('http://localhost:4000/businesschat/sendMessage', msg).then(response => {\n          if (response.data === 'Message sent') {\n            setUserChats(chatData => ({\n              ...chatData,\n              [selectedChat]: [...(chatData[selectedChat] || []), {\n                chatFrom: msg.chatFrom,\n                message: msg.message\n              }]\n            }));\n            setUpdate(true);\n            setMessageInput('');\n            setSubmitEnabled(true);\n            socketRef.current.emit('message', msg);\n          }\n        });\n      } else {\n        setSubmitEnabled(true);\n      }\n    }\n  }\n  useEffect(() => {\n    if (update) {\n      setCurrentChats(userChats[selectedChat]);\n      setUpdate(false);\n    } else {\n      const chatContainer = document.querySelector('.chatbox-background');\n      chatContainer.scrollTop = chatContainer.scrollHeight;\n    }\n  }, [update]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"BusinessChat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatselect-background\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chats\",\n        children: \"Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 29\n      }, this) : uniqueChats.map(user => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"chatselect-button\",\n        onClick: () => onChatSelect(user),\n        children: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbox-container\",\n      children: [selectedChat && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-user\",\n        children: selectedChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbox-background\",\n        children: selectedChat ? currentChats.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.chatFrom === selectedChat ? 'received' : 'sent'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-name\",\n            children: msg.chatFrom\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-text\",\n            children: msg.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 25\n        }, this)) : \"Select a chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        class: \"message-input\",\n        value: messageInput,\n        maxLength: \"144\",\n        placeholder: \"Enter your message...\",\n        onChange: onInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onInputSubmit,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this);\n}\n_s(BusinessChat, \"2QhNa8whkQKJ599/AQJlOxMbnSY=\");\n_c = BusinessChat;\nexport default BusinessChat;\nvar _c;\n$RefreshReg$(_c, \"BusinessChat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","axios","BusinessChat","document","title","username","JSON","parse","localStorage","getItem","radarChatUser","userChats","setUserChats","uniqueChats","setUniqueChats","currentChats","setCurrentChats","loading","setLoading","selectedChat","setSelectedChat","messageInput","setMessageInput","submitEnabled","setSubmitEnabled","update","setUpdate","socketRef","current","query","userId","on","messageT","chatFrom","includes","uniqueData","chatData","disconnect","get","then","response","data","newChats","newUniqueChats","forEach","messageObj","chatID","chatTo","message","user","push","reverse","catch","error","console","onChatSelect","onInputChange","e","target","value","onInputSubmit","log","length","msg","post","emit","chatContainer","querySelector","scrollTop","scrollHeight","map"],"sources":["E:/GitHub/Group-26-22-23-_CleanEnergyForBusiness/CEFB/client/src/Components/Pages/BusinessChat.js"],"sourcesContent":["import '../CSSContents/BusinessChat.css'\r\nimport React, {useState, useEffect, useRef} from \"react\";\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios'\r\n\r\nfunction BusinessChat(){\r\n\r\n    document.title = \"Business Chat\";\r\n    const username = JSON.parse(localStorage.getItem('username'));\r\n    const radarChatUser = JSON.parse(localStorage.getItem('radarChatUsername')); //radar - chat button clicked user\r\n    const [userChats, setUserChats] = useState({});\r\n    const [uniqueChats, setUniqueChats] = useState([]);\r\n    const [currentChats, setCurrentChats] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [selectedChat, setSelectedChat] = useState(null);\r\n    const [messageInput, setMessageInput] = useState('');\r\n    const [submitEnabled, setSubmitEnabled] = useState(false);\r\n    const [update, setUpdate] = useState(false);\r\n\r\n    const socketRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        socketRef.current = io('http://localhost:5000', {\r\n          query: {\r\n            userId: username,\r\n          },\r\n        });\r\n        socketRef.current.on('message', (messageT) => {\r\n          const chatFrom = messageT.chatFrom;\r\n          if (!uniqueChats.includes(chatFrom)) {\r\n            setUniqueChats((uniqueData) => [...uniqueData, chatFrom]);\r\n          }\r\n          setUserChats((chatData) => ({\r\n            ...chatData,\r\n            [chatFrom]: [...(chatData[chatFrom] || []), messageT],\r\n          }));\r\n          setUpdate(true);\r\n        });\r\n        return () => {\r\n            socketRef.current.disconnect();\r\n        };\r\n      }, [username, uniqueChats]);\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:4000/businesschat/getAllMessages/${username}`)\r\n            .then((response) => {\r\n                if (response.data) {\r\n    \r\n                    const newChats = {};\r\n                    const newUniqueChats = [];\r\n    \r\n                    response.data.forEach(messageObj => {\r\n                        const {chatID, chatTo, chatFrom, message} = messageObj;\r\n                        let user = null;\r\n                        if(chatTo === username){ // user received message \"chatFrom is the query\"\r\n                            user = chatFrom;\r\n                        }else{ // user sent message\r\n                            user = chatTo;\r\n                        }\r\n    \r\n                        if(!newChats[user]){\r\n                            newChats[user] = [{chatFrom, message}];\r\n                            newUniqueChats.push(user);\r\n                            \r\n                        }else{\r\n                            newChats[user].push({chatFrom, message});\r\n                        }\r\n                    });\r\n                    \r\n                    if(radarChatUser !== null){\r\n                        if(!newUniqueChats.includes(radarChatUser)){\r\n                            newUniqueChats.push(radarChatUser);\r\n                            newChats[radarChatUser] = [];\r\n                        }\r\n                    }\r\n\r\n                    newUniqueChats.reverse();\r\n                    setUserChats(newChats);\r\n                    setUniqueChats(newUniqueChats);\r\n                    setLoading(false);\r\n                    \r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n                setLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    const onChatSelect = (user) => {\r\n        setSubmitEnabled(true);\r\n        setSelectedChat(user);\r\n        setCurrentChats(userChats[user])\r\n\r\n    }\r\n\r\n    function onInputChange(e){\r\n        if(submitEnabled){\r\n            setMessageInput(e.target.value)\r\n        }\r\n    }\r\n\r\n    function onInputSubmit(){\r\n        if(submitEnabled){\r\n            setSubmitEnabled(false);\r\n            console.log(messageInput);\r\n            if(selectedChat !== null && messageInput !== '' && messageInput.length <= 144){// not empty, less than 145 characters\r\n                const msg = {\r\n                    chatFrom: username,\r\n                    chatTo: selectedChat,\r\n                    message: messageInput\r\n                };\r\n                console.log(msg);\r\n                axios.post('http://localhost:4000/businesschat/sendMessage', msg)\r\n                    .then((response) => {\r\n                        if (response.data === 'Message sent') {\r\n                            setUserChats(chatData => ({\r\n                                ...chatData,\r\n                                [selectedChat]: [...(chatData[selectedChat] || []), {chatFrom: msg.chatFrom, message: msg.message}]\r\n                            }));\r\n                            setUpdate(true);\r\n                            setMessageInput('');\r\n                            setSubmitEnabled(true);\r\n                            socketRef.current.emit('message', msg);\r\n                        }\r\n                })\r\n\r\n            }else{\r\n                setSubmitEnabled(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (update) {\r\n            setCurrentChats(userChats[selectedChat]);\r\n            setUpdate(false);\r\n        }else{\r\n            const chatContainer = document.querySelector('.chatbox-background');\r\n            chatContainer.scrollTop = chatContainer.scrollHeight;\r\n        }\r\n      }, [update]);\r\n    \r\n    return (\r\n        <div className='BusinessChat'> \r\n            <div className='chatselect-background'> \r\n                <div className='chats'>Users</div>\r\n                <br></br>\r\n                {loading ? (<div>Loading...</div>) : (\r\n                    uniqueChats.map(user => (\r\n                        <button className='chatselect-button' onClick={() => onChatSelect(user)}>{user}</button>\r\n                    ))\r\n                )}\r\n                <br></br>\r\n            </div>\r\n            <div className='chatbox-container'>\r\n                {selectedChat && <div className='selected-user'>{selectedChat}</div>}\r\n                <div className='chatbox-background'>\r\n                    {selectedChat ? \r\n                        currentChats.map(msg => (\r\n                        <div className={`message ${msg.chatFrom === selectedChat ? 'received' : 'sent'}`}>\r\n                            <div className='message-name'>{msg.chatFrom}</div>\r\n                            <div className='message-text'>{msg.message}</div>\r\n                        </div>\r\n                    )) : (\"Select a chat\")}\r\n                </div>\r\n                <input type=\"text\" class='message-input' value={messageInput} maxLength='144' placeholder=\"Enter your message...\" onChange={onInputChange}/>\r\n                <button onClick={onInputSubmit}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default BusinessChat;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}