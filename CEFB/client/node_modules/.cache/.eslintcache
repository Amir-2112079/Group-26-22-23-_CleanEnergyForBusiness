[{"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\index.js":"1","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\App.js":"2","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\reportWebVitals.js":"3","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\ErrorPage.js":"4","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Profile.js":"5","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Shop.js":"6","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Home.js":"7","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Footer.js":"8","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Cart.js":"9","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\AboutUs.js":"10","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\BusinessChat.js":"11","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Radar.js":"12","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Co2Calculator.js":"13","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Faq.js":"14","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\HomeContents\\BoilerBioFuel.js":"15","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\HomeContents\\Couriers.js":"16","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\HomeContents\\GymSolution.js":"17","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\LoginRegister.js":"18","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Navbar.js":"19","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\NavBar.js":"20","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Pt.js":"21","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Survey.js":"22"},{"size":427,"mtime":1678891203013,"results":"23","hashOfConfig":"24"},{"size":2146,"mtime":1678892624508,"results":"25","hashOfConfig":"24"},{"size":375,"mtime":1678891203013,"results":"26","hashOfConfig":"24"},{"size":268,"mtime":1678891203007,"results":"27","hashOfConfig":"24"},{"size":1383,"mtime":1678891203012,"results":"28","hashOfConfig":"24"},{"size":5823,"mtime":1678891203012,"results":"29","hashOfConfig":"24"},{"size":1558,"mtime":1678891203011,"results":"30","hashOfConfig":"24"},{"size":1692,"mtime":1678891203011,"results":"31","hashOfConfig":"24"},{"size":2801,"mtime":1678891203010,"results":"32","hashOfConfig":"24"},{"size":1663,"mtime":1678891203009,"results":"33","hashOfConfig":"24"},{"size":6779,"mtime":1678891203010,"results":"34","hashOfConfig":"24"},{"size":7373,"mtime":1678891203012,"results":"35","hashOfConfig":"24"},{"size":2401,"mtime":1678891203010,"results":"36","hashOfConfig":"24"},{"size":4041,"mtime":1678891203011,"results":"37","hashOfConfig":"24"},{"size":3093,"mtime":1678891203007,"results":"38","hashOfConfig":"24"},{"size":4485,"mtime":1678891203008,"results":"39","hashOfConfig":"24"},{"size":6716,"mtime":1678891203009,"results":"40","hashOfConfig":"24"},{"size":6195,"mtime":1678891203012,"results":"41","hashOfConfig":"24"},{"size":700,"mtime":1678892504572,"results":"42","hashOfConfig":"24"},{"size":700,"mtime":1678892504572,"results":"43","hashOfConfig":"24"},{"size":386,"mtime":1678892504572,"results":"44","hashOfConfig":"24"},{"size":4007,"mtime":1678892849320,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"1axh9dy",{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"49"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"49"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\index.js",[],[],[],"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\App.js",[],[],"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\reportWebVitals.js",[],[],"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\ErrorPage.js",[],[],"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Profile.js",[],[],"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Shop.js",[],[],"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Home.js",[],[],"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Footer.js",[],[],"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Cart.js",[],[],"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\AboutUs.js",[],[],"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\BusinessChat.js",["115","116","117"],[],"import '../CSSContents/BusinessChat.css'\r\nimport React, {useState, useEffect, useRef} from \"react\";\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios'\r\n\r\nfunction BusinessChat(){\r\n\r\n    document.title = \"Business Chat\";\r\n    const username = JSON.parse(localStorage.getItem('username'));\r\n    const radarChatUser = JSON.parse(localStorage.getItem('radarChatUsername')); //radar - chat button clicked user\r\n    const [userChats, setUserChats] = useState({});\r\n    const [uniqueChats, setUniqueChats] = useState([]);\r\n    const [currentChats, setCurrentChats] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [selectedChat, setSelectedChat] = useState(null);\r\n    const [messageInput, setMessageInput] = useState('');\r\n    const [submitEnabled, setSubmitEnabled] = useState(false);\r\n    const [update, setUpdate] = useState(false);\r\n\r\n    const socketRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        socketRef.current = io('http://localhost:5000', {\r\n          query: {\r\n            userId: username,\r\n          },\r\n        });\r\n        socketRef.current.on('message', (messageT) => {\r\n          const chatFrom = messageT.chatFrom;\r\n          if (!uniqueChats.includes(chatFrom)) {\r\n            setUniqueChats((uniqueData) => [...uniqueData, chatFrom]);\r\n          }\r\n          setUserChats((chatData) => ({\r\n            ...chatData,\r\n            [chatFrom]: [...(chatData[chatFrom] || []), messageT],\r\n          }));\r\n          setUpdate(true);\r\n        });\r\n        return () => {\r\n            socketRef.current.disconnect();\r\n        };\r\n      }, [username, uniqueChats]);\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:4000/businesschat/getAllMessages/${username}`)\r\n            .then((response) => {\r\n                if (response.data) {\r\n    \r\n                    const newChats = {};\r\n                    const newUniqueChats = [];\r\n    \r\n                    response.data.forEach(messageObj => {\r\n                        const {chatID, chatTo, chatFrom, message} = messageObj;\r\n                        let user = null;\r\n                        if(chatTo === username){ // user received message \"chatFrom is the query\"\r\n                            user = chatFrom;\r\n                        }else{ // user sent message\r\n                            user = chatTo;\r\n                        }\r\n    \r\n                        if(!newChats[user]){\r\n                            newChats[user] = [{chatFrom, message}];\r\n                            newUniqueChats.push(user);\r\n                            \r\n                        }else{\r\n                            newChats[user].push({chatFrom, message});\r\n                        }\r\n                    });\r\n                    \r\n                    if(radarChatUser !== null){\r\n                        if(!newUniqueChats.includes(radarChatUser)){\r\n                            newUniqueChats.push(radarChatUser);\r\n                            newChats[radarChatUser] = [];\r\n                        }\r\n                    }\r\n\r\n                    newUniqueChats.reverse();\r\n                    setUserChats(newChats);\r\n                    setUniqueChats(newUniqueChats);\r\n                    setLoading(false);\r\n                    \r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n                setLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    const onChatSelect = (user) => {\r\n        setSubmitEnabled(true);\r\n        setSelectedChat(user);\r\n        setCurrentChats(userChats[user])\r\n\r\n    }\r\n\r\n    function onInputChange(e){\r\n        if(submitEnabled){\r\n            setMessageInput(e.target.value)\r\n        }\r\n    }\r\n\r\n    function onInputSubmit(){\r\n        if(submitEnabled){\r\n            setSubmitEnabled(false);\r\n            console.log(messageInput);\r\n            if(selectedChat !== null && messageInput !== '' && messageInput.length <= 144){// not empty, less than 145 characters\r\n                const msg = {\r\n                    chatFrom: username,\r\n                    chatTo: selectedChat,\r\n                    message: messageInput\r\n                };\r\n                console.log(msg);\r\n                axios.post('http://localhost:4000/businesschat/sendMessage', msg)\r\n                    .then((response) => {\r\n                        if (response.data === 'Message sent') {\r\n                            setUserChats(chatData => ({\r\n                                ...chatData,\r\n                                [selectedChat]: [...(chatData[selectedChat] || []), {chatFrom: msg.chatFrom, message: msg.message}]\r\n                            }));\r\n                            setUpdate(true);\r\n                            setMessageInput('');\r\n                            setSubmitEnabled(true);\r\n                            socketRef.current.emit('message', msg);\r\n                        }\r\n                })\r\n\r\n            }else{\r\n                setSubmitEnabled(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (update) {\r\n            setCurrentChats(userChats[selectedChat]);\r\n            setUpdate(false);\r\n        }else{\r\n            const chatContainer = document.querySelector('.chatbox-background');\r\n            chatContainer.scrollTop = chatContainer.scrollHeight;\r\n        }\r\n      }, [update]);\r\n    \r\n    return (\r\n        <div className='BusinessChat'> \r\n            <div className='chatselect-background'> \r\n                <div className='chats'>Users</div>\r\n                <br></br>\r\n                {loading ? (<div>Loading...</div>) : (\r\n                    uniqueChats.map(user => (\r\n                        <button className='chatselect-button' onClick={() => onChatSelect(user)}>{user}</button>\r\n                    ))\r\n                )}\r\n                <br></br>\r\n            </div>\r\n            <div className='chatbox-container'>\r\n                {selectedChat && <div className='selected-user'>{selectedChat}</div>}\r\n                <div className='chatbox-background'>\r\n                    {selectedChat ? \r\n                        currentChats.map(msg => (\r\n                        <div className={`message ${msg.chatFrom === selectedChat ? 'received' : 'sent'}`}>\r\n                            <div className='message-name'>{msg.chatFrom}</div>\r\n                            <div className='message-text'>{msg.message}</div>\r\n                        </div>\r\n                    )) : (\"Select a chat\")}\r\n                </div>\r\n                <input type=\"text\" class='message-input' value={messageInput} maxLength='144' placeholder=\"Enter your message...\" onChange={onInputChange}/>\r\n                <button onClick={onInputSubmit}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default BusinessChat;","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Radar.js",["118","119"],[],"import '../CSSContents/Radar.css'\r\nimport 'leaflet/dist/leaflet.css';\r\nimport React, {useState, useEffect} from \"react\";\r\nimport { MapContainer } from 'react-leaflet/MapContainer'\r\nimport { TileLayer } from 'react-leaflet/TileLayer'\r\nimport { Marker } from 'react-leaflet/Marker'\r\nimport { Popup } from 'react-leaflet/Popup'\r\nimport { Icon } from 'leaflet'\r\nimport axios from 'axios'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nfunction Radar(){\r\n    localStorage.removeItem('radarChatUsername');\r\n    const [position, setPosition] = useState([0, 0])\r\n    const [markerInfo, setMarkerInfo] = useState({\r\n        username: JSON.parse(localStorage.getItem('username')),\r\n        name: '',\r\n        lat: '',\r\n        lng: '',\r\n    });\r\n    const [errors, setErrors] = useState([]);\r\n    const [showMap, setShowMap] = useState(false);\r\n    const [hasMarker, setHasMarker] = useState(false);\r\n    const [showUpdate, setShowUpdate] = useState(false);\r\n    const [mapMarkers, setMapMarkers] = useState([]);\r\n    const [update, setUpdate] = useState(false);\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:4000/locationget/${markerInfo.username}`)\r\n        .then((response) => {\r\n            if (response.data) {                \r\n                const{business, latitude, longitude} = response.data;\r\n                markerInfo.name = business;\r\n                markerInfo.latitude = latitude;\r\n                markerInfo.longitude = longitude;\r\n                setPosition([markerInfo.latitude, markerInfo.longitude])\r\n                setHasMarker(true);\r\n                setUpdate(true)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            if(error.response){\r\n                if(error.response.status === 404){\r\n                    setShowUpdate(true)\r\n                }\r\n            }\r\n        })\r\n        console.log(showUpdate)\r\n    }, []);\r\n\r\n    \r\n\r\n    const onInfoChange = (e) => {\r\n        setMarkerInfo({\r\n            ...markerInfo,\r\n            [e.target.name]: e.target.value,\r\n        }\r\n    )};\r\n  \r\n\r\n    function checkErrors(){\r\n        const err = [];\r\n\r\n        if (!markerInfo.name) {\r\n            err.push(\"- Business Name: No business name entered.\")\r\n        }else if(markerInfo.name.length <= 2){\r\n            err.push(\"- Business Name: Business name must be at least 3 characters long.\")\r\n        }else if(markerInfo.name.length > 30){\r\n            err.push(\"- Business Name: Business name must be 30 characters or less.\")\r\n        }\r\n        if (!markerInfo.lat) {\r\n            err.push(\"- Business Location: No business latitude entered.\")\r\n        } else if (isNaN(markerInfo.lat)) {\r\n            err.push(\"- Business Location: Latitude is not a number.\")\r\n        }\r\n        if (!markerInfo.lng) {\r\n            err.push(\"- Business Location: No business longitude entered.\")\r\n        } else if (isNaN(markerInfo.lng)) {\r\n            err.push(\"- Business Location: Longitude is not a number.\")\r\n        }\r\n\r\n        \r\n        return err;\r\n    };\r\n  \r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const err = checkErrors();\r\n        setErrors(err);\r\n        console.log(err);\r\n\r\n        if (err.length === 0){\r\n            if(!hasMarker){\r\n                axios.post('http://localhost:4000/locationset', markerInfo)\r\n                .then((response) => {\r\n                    if (response.data === 'Business data successfully entered') {\r\n                        setPosition([markerInfo.lat, markerInfo.lng]);\r\n                        setHasMarker(true);\r\n                        setUpdate(true);\r\n                    }\r\n                })\r\n            }else{\r\n                axios.post('http://localhost:4000/locationUpdate', markerInfo)\r\n                .then((response) => {\r\n                    if (response.data === 'Business data successfully updated') {\r\n                        setPosition([markerInfo.lat, markerInfo.lng]);\r\n                        setUpdate(true);\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (update) {\r\n            axios.get(`http://localhost:4000/locationgetMarkers/${markerInfo.username}`)\r\n            .then((response) => {\r\n                if (response.data) {\r\n                    setMapMarkers(response.data)\r\n                    setShowMap(true);\r\n                }\r\n            })\r\n            .finally(() => {\r\n                setUpdate(false);\r\n            })\r\n        }\r\n      }, [update]);\r\n\r\n    return (\r\n        <div>\r\n            {!showUpdate && <button onClick={() => setShowUpdate(!showUpdate)}>Update Business Information</button> }\r\n            {showUpdate && hasMarker && <button onClick={() => setShowUpdate(!showUpdate)}>Hide</button> }\r\n            <br></br>\r\n            {showUpdate && \r\n                <form onSubmit={onSubmit}>\r\n                <div className='input-title'>Business Name</div>\r\n                <input type=\"text\" className='input' name=\"name\" placeholder=\"Name\" onChange={onInfoChange}/>\r\n                <div className='input-title'>Business Location</div>\r\n                <div>\r\n                <input type=\"text\" className='input' name=\"lat\" placeholder=\"Latitude\" onChange={onInfoChange}/>\r\n                <input type=\"text\" className='input' name=\"lng\" placeholder=\"Longitude\" onChange={onInfoChange}/>\r\n                </div>\r\n                <button type=\"submit\">Set Business Information</button>\r\n                </form>\r\n            }\r\n            {errors.map(err => (\r\n                <div className='error-text'>{err}</div>\r\n            ))}\r\n            <br></br>\r\n            {showMap && <Map mapPosition={position} mapMarkers={mapMarkers} />}\r\n        </div>\r\n      );\r\n\r\n}\r\n\r\n\r\nfunction Map({mapPosition, mapMarkers}) {\r\n\r\n    const userBusinessIcon = new Icon({\r\n        iconUrl: process.env.PUBLIC_URL + '/images/map-marker-icon-blue.png',\r\n        iconSize: [48,48]\r\n     })\r\n    const otherBusinessIcon = new Icon({\r\n        iconUrl: process.env.PUBLIC_URL + '/images/map-marker-icon.png',\r\n        iconSize: [48,48]\r\n    })\r\n\r\n    function onMarkerChat(markername){\r\n        console.log(markername);\r\n        localStorage.setItem('radarChatUsername', JSON.stringify(markername));\r\n    }\r\n\r\n    return (\r\n        <MapContainer center={mapPosition} zoom={15} scrollWheelZoom={false}>\r\n            <TileLayer\r\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors'\r\n                url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n            />\r\n            <Marker position={mapPosition} icon={userBusinessIcon}>\r\n                <Popup>\r\n                    This is your business.\r\n                </Popup>\r\n            </Marker>\r\n            {mapMarkers.map(marker => (\r\n                <Marker position={[marker.latitude, marker.longitude]} icon={otherBusinessIcon}>\r\n                    <Popup>\r\n                        {marker.name}\r\n                        <br></br>\r\n                        {marker.username}\r\n                        <br />\r\n                        <Link to='/BusinessChat'>\r\n                            <button onClick={() => onMarkerChat(marker.username)}>Chat</button>\r\n                        </Link>\r\n                    </Popup>\r\n                </Marker>\r\n            ))}\r\n        </MapContainer>\r\n    )\r\n}\r\n\r\n\r\nexport default Radar;\r\n","E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Co2Calculator.js",[],[],"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Faq.js",[],[],"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\HomeContents\\BoilerBioFuel.js",[],[],"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\HomeContents\\Couriers.js",[],[],"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\HomeContents\\GymSolution.js",[],[],"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\LoginRegister.js",[],[],"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Navbar.js",[],[],"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\NavBar.js",[],[],"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Pt.js",[],[],"E:\\GitHub\\Group-26-22-23-_CleanEnergyForBusiness\\CEFB\\client\\src\\Components\\Pages\\Survey.js",["120","121"],[],{"ruleId":"122","severity":1,"message":"123","line":53,"column":32,"nodeType":"124","messageId":"125","endLine":53,"endColumn":38},{"ruleId":"126","severity":1,"message":"127","line":88,"column":8,"nodeType":"128","endLine":88,"endColumn":10,"suggestions":"129"},{"ruleId":"126","severity":1,"message":"130","line":142,"column":10,"nodeType":"128","endLine":142,"endColumn":18,"suggestions":"131"},{"ruleId":"126","severity":1,"message":"132","line":51,"column":8,"nodeType":"128","endLine":51,"endColumn":10,"suggestions":"133"},{"ruleId":"126","severity":1,"message":"134","line":130,"column":10,"nodeType":"128","endLine":130,"endColumn":18,"suggestions":"135"},{"ruleId":"122","severity":1,"message":"136","line":20,"column":10,"nodeType":"124","messageId":"125","endLine":20,"endColumn":16},{"ruleId":"122","severity":1,"message":"137","line":20,"column":18,"nodeType":"124","messageId":"125","endLine":20,"endColumn":28},"no-unused-vars","'chatID' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'radarChatUser' and 'username'. Either include them or remove the dependency array.","ArrayExpression",["138"],"React Hook useEffect has missing dependencies: 'selectedChat' and 'userChats'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCurrentChats' needs the current value of 'userChats'.",["139"],"React Hook useEffect has missing dependencies: 'markerInfo' and 'showUpdate'. Either include them or remove the dependency array.",["140"],"React Hook useEffect has a missing dependency: 'markerInfo.username'. Either include it or remove the dependency array.",["141"],"'survey' is assigned a value but never used.","'setSurveys' is assigned a value but never used.",{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},"Update the dependencies array to be: [radarChatUser, username]",{"range":"150","text":"151"},"Update the dependencies array to be: [selectedChat, update, userChats]",{"range":"152","text":"153"},"Update the dependencies array to be: [markerInfo, showUpdate]",{"range":"154","text":"155"},"Update the dependencies array to be: [markerInfo.username, update]",{"range":"156","text":"157"},[3407,3409],"[radarChatUser, username]",[5318,5326],"[selectedChat, update, userChats]",[1869,1871],"[markerInfo, showUpdate]",[4469,4477],"[markerInfo.username, update]"]