{"ast":null,"code":"var _jsxFileName = \"E:\\\\GitHub\\\\CleanEnergyForBusiness\\\\cleanenergyforbusiness\\\\client\\\\src\\\\Components\\\\Pages\\\\Login2.js\",\n  _s = $RefreshSig$();\nimport \"../CSSContents/newLog.css\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login2() {\n  _s();\n  //Saving the values in the form variable\n  const [form, setForm] = useState({\n    username: '',\n    password: ''\n  });\n  //mode determines whether the form should display login or register\n  const [mode, setMode] = useState('login');\n  const [errors, setErrors] = useState({});\n  //message is used to display any form of error to the user\n  const [message, setMessage] = useState('');\n\n  //it updates the user's values in case a change has been made \n  //used a spread operator to update the form by targeting .name and .value \n  const handleChange = e => {\n    setForm({\n      ...form,\n      [e.target.name]: e.target.value\n    });\n  };\n  const validateInfo = form => {\n    let errors = {};\n    if (!form.username.trim()) {\n      errors.username = 'Username is required!';\n    }\n    if (!form.password) {\n      errors.password = 'Password is required';\n    } else if (form.password.length < 6) {\n      errors.password = 'Password must be at least 6 characters long!';\n    }\n    return errors;\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const errors = validateInfo(form);\n    setErrors(errors);\n    if (Object.keys(errors).length === 0) {\n      axios.post('http://localhost:4000/login', form).then(response => {\n        if (response.data === 'Logged in successfully') {\n          setMessage('Logged in successfully');\n          window.location.href = '/';\n        } else {\n          setMessage('Login was unsuccessful');\n        }\n      }).catch(error => {\n        setMessage(error.message);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"username\",\n        placeholder: \"Username\",\n        value: form.username,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), errors.username && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", errors.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        placeholder: \"Password\",\n        value: form.password,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), errors.password && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", errors.password]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n_s(Login2, \"IdRQ6+8DlmzDRpPiUDZOUkjS0y4=\");\n_c = Login2;\n;\nexport default Login2;\n\n/*\r\nfunction Login2() {\r\n\r\n    //Saving the values in the form variable\r\n    const [form, setForm] = useState({\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n    });\r\n    //mode determines whether the form should disply login or register\r\n    const [mode, setMode] = useState('login');\r\n    const [errors, setErrors] = useState({});\r\n    //message is used to disply any form of error to the user\r\n    const [message, setMessage] = useState('');\r\n\r\n\r\n    //it updates the users values in case a change has been made \r\n    //used a spread operator to update the form by targeting .name and .value \r\n    const handleChange = (e) => {\r\n        setForm({\r\n            ...form,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n\r\n    };\r\n\r\n    const validateInfo = (form) => {\r\n        let errors = {};\r\n        if (!form.username.trim()) {\r\n            errors.username = 'Username is required!';\r\n        }\r\n        if (!form.email) {\r\n            errors.email = 'Email is required!';\r\n        } else if (!/\\S+@\\S+\\.\\S+/.test(form.email)) {\r\n            errors.email = 'Email address is invalid';\r\n        }\r\n        if (!form.password) {\r\n            errors.password = 'Password is required';\r\n        } else if (form.password.length < 6) {\r\n            errors.password = 'Password must be at least 6 characters long!';\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n\r\n\r\n    //it is used when the form is submitted, sends message to the backend to either login or register\r\n    //if successful/denied  response is saved in message\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const errors = validateInfo(form);\r\n        setErrors(errors);\r\n\r\n        if (Object.keys(errors).length === 0) {\r\n            if (mode === 'login') {\r\n                axios.post('http://localhost:4000/login', form)\r\n                    .then((response) => {\r\n                        if (response.data === 'Logged in successfully') {\r\n                            setMessage('Logged in successfully');\r\n\r\n                            window.location.href = '/';\r\n                        } else {\r\n                            setMessage('Login was unsuccessful');\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        setMessage(error.message);\r\n                    });\r\n            } else {\r\n                axios.get(`http://localhost:4000/checkUser/${form.username}`)\r\n                    .then((response) => {\r\n                        if (response.data === 'User exists') {\r\n                            setMessage('User already exists');\r\n                            return;\r\n                        } else {\r\n                            axios.post('http://localhost:4000/register', form)\r\n                                .then((response) => {\r\n                                    setMessage(response.data);\r\n                                })\r\n                                .catch((error) => {\r\n                                    setMessage(error.message);\r\n                                });\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        setMessage(error.message);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"username\"\r\n                    placeholder=\"Username\"\r\n                    value={form.username}\r\n                    onChange={handleChange}\r\n                />\r\n                {errors.username && <p> {errors.username}</p>}\r\n                {mode === 'register' && (\r\n                    <>\r\n                        <input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            placeholder=\"Email\"\r\n                            value={form.email}\r\n                            onChange={handleChange}\r\n                        />\r\n                        {errors.email && <p> {errors.email}</p>}\r\n                    </>\r\n                )}\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={form.password}\r\n                    onChange={handleChange}\r\n                />\r\n                {errors.password && <p> {errors.password}</p>}\r\n\r\n                <button type=\"submit\">\r\n                    {mode === 'login' ? 'Login' : 'Register'}\r\n                </button>\r\n\r\n                <button type=\"button\" onClick={() => setMode(mode === 'login' ? 'register' : 'login')}>\r\n                    Switch to {mode === 'login' ? 'Register' : 'Login'}\r\n                </button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\n//window.location.href ='/newPage';\r\n//ternary operator\r\n\r\nexport default Login2;\r\n*/\n\n/*\r\n//insert in the login\r\nwindow.localStorage.setItem('isLoggedIn', true);\r\n\r\n  useEffect(() => {\r\n        const isLoggedIn = window.localStorage.getItem('isLoggedIn');\r\n        if (isLoggedIn) {\r\n            setMessage(\"Logged in successfully\");\r\n            window.location.href = '/';\r\n        }\r\n    }, []);\r\n*/\n\n/*\r\n\r\n const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setErros(validateInfo(form));\r\n\r\n\r\n        if (mode === 'login') {\r\n            axios.post('http://localhost:4000/login', form)\r\n                .then((response) => {\r\n                    setMessage(response.data);\r\n                })\r\n                .catch((error) => {\r\n                    setMessage(error.message);\r\n                });\r\n        } else {\r\n            axios.post('http://localhost:4000/register', form)\r\n                .then((response) => {\r\n                    setMessage(response.data);\r\n                })\r\n                .catch((error) => {\r\n                    setMessage(error.message);\r\n                });\r\n        }\r\n\r\n    };\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Login2\");","map":{"version":3,"names":["React","useState","useEffect","axios","Login2","form","setForm","username","password","mode","setMode","errors","setErrors","message","setMessage","handleChange","e","target","name","value","validateInfo","trim","length","handleSubmit","preventDefault","Object","keys","post","then","response","data","window","location","href","catch","error"],"sources":["E:/GitHub/CleanEnergyForBusiness/cleanenergyforbusiness/client/src/Components/Pages/Login2.js"],"sourcesContent":["import \"../CSSContents/newLog.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n\r\nfunction Login2() {\r\n\r\n    //Saving the values in the form variable\r\n    const [form, setForm] = useState({\r\n        username: '',\r\n        password: '',\r\n    });\r\n    //mode determines whether the form should display login or register\r\n    const [mode, setMode] = useState('login');\r\n    const [errors, setErrors] = useState({});\r\n    //message is used to display any form of error to the user\r\n    const [message, setMessage] = useState('');\r\n\r\n\r\n    //it updates the user's values in case a change has been made \r\n    //used a spread operator to update the form by targeting .name and .value \r\n    const handleChange = (e) => {\r\n        setForm({\r\n            ...form,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n\r\n    };\r\n\r\n    const validateInfo = (form) => {\r\n        let errors = {};\r\n        if (!form.username.trim()) {\r\n            errors.username = 'Username is required!';\r\n        }\r\n        if (!form.password) {\r\n            errors.password = 'Password is required';\r\n        } else if (form.password.length < 6) {\r\n            errors.password = 'Password must be at least 6 characters long!';\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const errors = validateInfo(form);\r\n        setErrors(errors);\r\n\r\n        if (Object.keys(errors).length === 0) {\r\n            axios.post('http://localhost:4000/login', form)\r\n                .then((response) => {\r\n                    if (response.data === 'Logged in successfully') {\r\n                        setMessage('Logged in successfully');\r\n\r\n                        window.location.href = '/';\r\n                    } else {\r\n                        setMessage('Login was unsuccessful');\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    setMessage(error.message);\r\n                });\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"username\"\r\n                    placeholder=\"Username\"\r\n                    value={form.username}\r\n                    onChange={handleChange}\r\n                />\r\n                {errors.username && <p> {errors.username}</p>}\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={form.password}\r\n                    onChange={handleChange}\r\n                />\r\n                {errors.password && <p> {errors.password}</p>}\r\n\r\n                <button type=\"submit\">\r\n                    Login\r\n                </button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nfunction Login2() {\r\n\r\n    //Saving the values in the form variable\r\n    const [form, setForm] = useState({\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n    });\r\n    //mode determines whether the form should disply login or register\r\n    const [mode, setMode] = useState('login');\r\n    const [errors, setErrors] = useState({});\r\n    //message is used to disply any form of error to the user\r\n    const [message, setMessage] = useState('');\r\n\r\n\r\n    //it updates the users values in case a change has been made \r\n    //used a spread operator to update the form by targeting .name and .value \r\n    const handleChange = (e) => {\r\n        setForm({\r\n            ...form,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n\r\n    };\r\n\r\n    const validateInfo = (form) => {\r\n        let errors = {};\r\n        if (!form.username.trim()) {\r\n            errors.username = 'Username is required!';\r\n        }\r\n        if (!form.email) {\r\n            errors.email = 'Email is required!';\r\n        } else if (!/\\S+@\\S+\\.\\S+/.test(form.email)) {\r\n            errors.email = 'Email address is invalid';\r\n        }\r\n        if (!form.password) {\r\n            errors.password = 'Password is required';\r\n        } else if (form.password.length < 6) {\r\n            errors.password = 'Password must be at least 6 characters long!';\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n\r\n\r\n    //it is used when the form is submitted, sends message to the backend to either login or register\r\n    //if successful/denied  response is saved in message\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const errors = validateInfo(form);\r\n        setErrors(errors);\r\n\r\n        if (Object.keys(errors).length === 0) {\r\n            if (mode === 'login') {\r\n                axios.post('http://localhost:4000/login', form)\r\n                    .then((response) => {\r\n                        if (response.data === 'Logged in successfully') {\r\n                            setMessage('Logged in successfully');\r\n\r\n                            window.location.href = '/';\r\n                        } else {\r\n                            setMessage('Login was unsuccessful');\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        setMessage(error.message);\r\n                    });\r\n            } else {\r\n                axios.get(`http://localhost:4000/checkUser/${form.username}`)\r\n                    .then((response) => {\r\n                        if (response.data === 'User exists') {\r\n                            setMessage('User already exists');\r\n                            return;\r\n                        } else {\r\n                            axios.post('http://localhost:4000/register', form)\r\n                                .then((response) => {\r\n                                    setMessage(response.data);\r\n                                })\r\n                                .catch((error) => {\r\n                                    setMessage(error.message);\r\n                                });\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        setMessage(error.message);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"username\"\r\n                    placeholder=\"Username\"\r\n                    value={form.username}\r\n                    onChange={handleChange}\r\n                />\r\n                {errors.username && <p> {errors.username}</p>}\r\n                {mode === 'register' && (\r\n                    <>\r\n                        <input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            placeholder=\"Email\"\r\n                            value={form.email}\r\n                            onChange={handleChange}\r\n                        />\r\n                        {errors.email && <p> {errors.email}</p>}\r\n                    </>\r\n                )}\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={form.password}\r\n                    onChange={handleChange}\r\n                />\r\n                {errors.password && <p> {errors.password}</p>}\r\n\r\n                <button type=\"submit\">\r\n                    {mode === 'login' ? 'Login' : 'Register'}\r\n                </button>\r\n\r\n                <button type=\"button\" onClick={() => setMode(mode === 'login' ? 'register' : 'login')}>\r\n                    Switch to {mode === 'login' ? 'Register' : 'Login'}\r\n                </button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\n//window.location.href ='/newPage';\r\n//ternary operator\r\n\r\nexport default Login2;\r\n*/\r\n\r\n/*\r\n//insert in the login\r\nwindow.localStorage.setItem('isLoggedIn', true);\r\n\r\n  useEffect(() => {\r\n        const isLoggedIn = window.localStorage.getItem('isLoggedIn');\r\n        if (isLoggedIn) {\r\n            setMessage(\"Logged in successfully\");\r\n            window.location.href = '/';\r\n        }\r\n    }, []);\r\n*/\r\n\r\n\r\n\r\n/*\r\n\r\n const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setErros(validateInfo(form));\r\n\r\n\r\n        if (mode === 'login') {\r\n            axios.post('http://localhost:4000/login', form)\r\n                .then((response) => {\r\n                    setMessage(response.data);\r\n                })\r\n                .catch((error) => {\r\n                    setMessage(error.message);\r\n                });\r\n        } else {\r\n            axios.post('http://localhost:4000/register', form)\r\n                .then((response) => {\r\n                    setMessage(response.data);\r\n                })\r\n                .catch((error) => {\r\n                    setMessage(error.message);\r\n                });\r\n        }\r\n\r\n    };\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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},"metadata":{},"sourceType":"module","externalDependencies":[]}